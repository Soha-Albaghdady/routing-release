<%=
  require 'json'

  nats_machines = nil
  nats_port = nil
  nats_user = nil
  nats_password= nil

  if_p('nats.machines') do |ips|
    nats_machines = ips.compact
  end
  if_p('nats.port') do |prop|
    nats_port = prop
  end
  if_p('nats.user') do |prop|
    nats_user = prop
  end
  if_p('nats.password') do |prop|
    nats_password = prop
  end
  if_link('nats') do |nats_link|
    nats_machines = nats_link.instances.map { |instance| instance.address }
    nats_link.if_p("nats.hostname") do |hostname|
      nats_machines = [hostname]
    end.else do
      nats_machines = nats_link.instances.map { |instance| instance.address }
    end
    nats_port = nats_link.p("nats.port")
    nats_user = nats_link.p("nats.user")
    nats_password = nats_link.p("nats.password")
  end
  if_link('nats-tls') do |nats_tls_link|
    if p('nats.tls.enabled')
      nats_machines = nats_tls_link.instances.map { |instance| instance.address }
      nats_tls_link.if_p("nats.hostname") do |hostname|
        nats_machines = [hostname]
      end
      if_p("nats.tls.hostname") do | prop |
        nats_machines = [prop]
      end
      nats_port = nats_tls_link.p("nats.port")
      nats_user = nats_tls_link.p("nats.user")
      nats_password = nats_tls_link.p("nats.password")
    end
  end



  message_bus_servers = nats_machines.map do |host|
    {
      host: "#{host}:#{nats_port}",
      user: "#{nats_user}",
      password: "#{nats_password}"
    }
  end

  routes = p('route_registrar.routes')

  routes.each_with_index do |route, index|
    if route['tls_port'] != nil && (route['server_cert_domain_san'] == nil || route['server_cert_domain_san'].length <= 0)
      raise "expected route_registrar.routes[#{index}].route.server_cert_domain_san when tls_port is provided"
    end

    if route['prepend_instance_index']
      route['uris'].map! { |uri| "#{spec.index}-#{uri}" }
    end
  end

  host = nil
  if_p('host') do |prop|
    host = prop
  end.else do
    host = spec.ip
  end

  routing_api = {
    ca_certs: '/var/vcap/jobs/route_registrar/config/certs/ca.crt',
    client_cert_path: '/var/vcap/jobs/route_registrar/config/routing_api/certs/client.crt',
    client_private_key_path: '/var/vcap/jobs/route_registrar/config/routing_api/keys/client_private.key',
    server_ca_cert_path: '/var/vcap/jobs/route_registrar/config/routing_api/certs/server_ca.crt'
  }
  if_p('route_registrar.routing_api.api_url') do |prop|
    if_link('routing_api') do |link|
      if link.p('routing_api.enabled_api_endpoints') == "mtls" and not prop.start_with?('https')
          raise 'expected route_registrar.routing_api.api_url to be https when routing_api.enabled_api_endpoints is mtls only'
      end
    end

    routing_api['api_url'] = prop
  end
  if_p('route_registrar.routing_api.oauth_url') do |prop|
    routing_api['oauth_url'] = prop
  end
  if_p('route_registrar.routing_api.client_id') do |prop|
    routing_api['client_id'] = prop
  end
  if_p('route_registrar.routing_api.client_secret') do |prop|
    routing_api['client_secret'] = prop
  end

  routing_api['skip_ssl_validation'] = p('route_registrar.routing_api.skip_ssl_validation')

  nats_mtls_config = {
     enabled: p('nats.tls.enabled'),
     cert_path: '/var/vcap/jobs/route_registrar/config/nats/certs/client.crt',
     key_path: '/var/vcap/jobs/route_registrar/config/nats/certs/client_private.key',
     ca_path: '/var/vcap/jobs/route_registrar/config/nats/certs/server_ca.crt'
  }

  config = {
    message_bus_servers: message_bus_servers,
    nats_mtls_config: nats_mtls_config,
    host: host,
    routes: routes,
    routing_api: routing_api,
  }
  JSON.pretty_generate(config)
%>
